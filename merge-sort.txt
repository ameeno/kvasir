Merge sort
An example of merge sort.
First divide the list into the
smallest unit (1 element),
then compare each element
with the adjacent list to sort
and merge the two adjacent
lists. Finally all the elements
are sorted and merged.
Class Sorting
algorithm
Data
structure
Array
Worst-case
performance
O(n log n)
Best-case
performance
O(n log n)
typical, O(n)
natural
variant
Average
performance
O(n log n)
Worst-case
space
complexity
О(n) total with
O(n) auxiliary,
O(1) auxiliary
with linked
lists
[1]
Merge sort
In computer science, merge sort (also commonly spelled
mergesort) is an efficient, general-purpose, comparison-based
sorting algorithm. Most implementations produce a stable sort,
which means that the order of equal elements is the same in the
input and output. Merge sort is a divide and conquer algorithm
that was invented by John von Neumann in 1945.[2] A detailed
description and analysis of bottom-up mergesort appeared in a
report by Goldstine and von Neumann as early as 1948.[3]
Algorithm
Top-down implementation
Bottom-up implementation
Top-down implementation using lists
Bottom-up implementation using lists
Natural merge sort
Analysis
Variants
Use with tape drives
Optimizing merge sort
Parallel merge sort
Merge sort with parallel recursion
Merge sort with parallel merging
Parallel multiway merge sort
Basic Idea
Multisequence selection
Pseudocode
Analysis
Practical adaption and application
Further Variants
Comparison with other sort algorithms
Notes
References
External links
Conceptually, a merge sort works as follows:
Contents
Algorithm
1. Divide the unsorted list into n sublists, each containing one element (a list of one element is
considered sorted).
2. Repeatedly merge sublists to produce new sorted sublists until there is only one sublist
remaining. This will be the sorted list.
Example C-like code using indices for top-down merge sort algorithm that recursively splits the list
(called runs in this example) into sublists until sublist size is 1, then merges those sublists to produce
a sorted list. The copy back step is avoided with alternating the direction of the merge with each level
of recursion (except for an initial one time copy). To help understand this, consider an array with 2
elements. The elements are copied to B[], then merged back to A[]. If there are 4 elements, when the
bottom of recursion level is reached, single element runs from A[] are merged to B[], and then at the
next higher level of recursion, those 2 element runs are merged to A[]. This pattern continues with
each level of recursion.
// Array A[] has the items to sort; array B[] is a work array.
void TopDownMergeSort(A[], B[], n)
{
CopyArray(A, 0, n, B); // one time copy of A[] to B[]
TopDownSplitMerge(B, 0, n, A); // sort data from B[] into A[]
}
// Sort the given run of array A[] using array B[] as a source.
// iBegin is inclusive; iEnd is exclusive (A[iEnd] is not in the set).
void TopDownSplitMerge(B[], iBegin, iEnd, A[])
{
if(iEnd - iBegin <= 1) // if run size == 1
return; // consider it sorted
// split the run longer than 1 item into halves
iMiddle = (iEnd + iBegin) / 2; // iMiddle = mid point
// recursively sort both runs from array A[] into B[]
TopDownSplitMerge(A, iBegin, iMiddle, B); // sort the left run
TopDownSplitMerge(A, iMiddle, iEnd, B); // sort the right run
// merge the resulting runs from array B[] into A[]
TopDownMerge(B, iBegin, iMiddle, iEnd, A);
}
// Left source half is A[ iBegin:iMiddle-1].
// Right source half is A[iMiddle:iEnd-1 ].
// Result is B[ iBegin:iEnd-1 ].
void TopDownMerge(A[], iBegin, iMiddle, iEnd, B[])
{
i = iBegin, j = iMiddle;
// While there are elements in the left or right runs...
for (k = iBegin; k < iEnd; k++) {
// If left run head exists and is <= existing right run head.
if (i < iMiddle && (j >= iEnd || A[i] <= A[j])) {
B[k] = A[i];
i = i + 1;
} else {
B[k] = A[j];
j = j + 1;
}
}
}
void CopyArray(A[], iBegin, iEnd, B[])
{
for(k = iBegin; k < iEnd; k++)
B[k] = A[k];
}
Sorting the entire array is accomplished by TopDownMergeSort(A, B, length(A)).
Top-down implementation
Bottom-up implementation
Example C-like code using indices for bottom-up merge sort algorithm which treats the list as an
array of n sublists (called runs in this example) of size 1, and iteratively merges sub-lists back and
forth between two buffers:
// array A[] has the items to sort; array B[] is a work array
void BottomUpMergeSort(A[], B[], n)
{
// Each 1-element run in A is already "sorted".
// Make successively longer sorted runs of length 2, 4, 8, 16... until whole array is sorted.
for (width = 1; width < n; width = 2 * width)
{
// Array A is full of runs of length width.
for (i = 0; i < n; i = i + 2 * width)
{
// Merge two runs: A[i:i+width-1] and A[i+width:i+2*width-1] to B[]
// or copy A[i:n-1] to B[] ( if(i+width >= n) )
BottomUpMerge(A, i, min(i+width, n), min(i+2*width, n), B);
}
// Now work array B is full of runs of length 2*width.
// Copy array B to array A for next iteration.
// A more efficient implementation would swap the roles of A and B.
CopyArray(B, A, n);
// Now array A is full of runs of length 2*width.
}
}
// Left run is A[iLeft :iRight-1].
// Right run is A[iRight:iEnd-1 ].
void BottomUpMerge(A[], iLeft, iRight, iEnd, B[])
{
i = iLeft, j = iRight;
// While there are elements in the left or right runs...
for (k = iLeft; k < iEnd; k++) {
// If left run head exists and is <= existing right run head.
if (i < iRight && (j >= iEnd || A[i] <= A[j])) {
B[k] = A[i];
i = i + 1;
} else {
B[k] = A[j];
j = j + 1;
}
}
}
void CopyArray(B[], A[], n)
{
for(i = 0; i < n; i++)
A[i] = B[i];
}
Pseudocode for top-down merge sort algorithm which recursively divides the input list into smaller
sublists until the sublists are trivially sorted, and then merges the sublists while returning up the call
chain.
function merge_sort(list m) is
// Base case. A list of zero or one elements is sorted, by definition.
if length of m ≤ 1 then
return m
// Recursive case. First, divide the list into equal-sized sublists
// consisting of the first half and second half of the list.
// This assumes lists start at index 0.
var left := empty list
var right := empty list
for each x with index i in m do
if i < (length of m)/2 then
add x to left
else
add x to right
Top-down implementation using lists
// Recursively sort both sublists.
left := merge_sort(left)
right := merge_sort(right)
// Then merge the now-sorted sublists.
return merge(left, right)
In this example, the merge function merges the left and right sublists.
function merge(left, right) is
var result := empty list
while left is not empty and right is not empty do
if first(left) ≤ first(right) then
append first(left) to result
left := rest(left)
else
append first(right) to result
right := rest(right)
// Either left or right may have elements left; consume them.
// (Only one of the following loops will actually be entered.)
while left is not empty do
append first(left) to result
left := rest(left)
while right is not empty do
append first(right) to result
right := rest(right)
return result
Pseudocode for bottom-up merge sort algorithm which uses a small fixed size array of references to
nodes, where array[i] is either a reference to a list of size 2
i or nil. node is a reference or pointer to a
node. The merge() function would be similar to the one shown in the top-down merge lists example, it
merges two already sorted lists, and handles empty lists. In this case, merge() would use node for its
input parameters and return value.
function merge_sort(node head) is
// return if empty list
if head = nil then
return nil
var node array[32]; initially all nil
var node result
var node next
var int i
result := head
// merge nodes into array
while result ≠ nil do
next := result.next;
result.next := nil
for(i = 0; (i < 32) && (array[i] ≠ nil); i += 1) do
result := merge(array[i], result)
array[i] := nil
// do not go past end of array
if i = 32 then
i -= 1
array[i] := result
result := next
// merge array into single list
result := nil
for (i = 0; i < 32; i += 1) do
result := merge(array[i], result)
return result
Bottom-up implementation using lists
Natural merge sort
A recursive merge sort algorithm used to sort an
array of 7 integer values. These are the steps a
human would take to emulate merge sort (topdown).
A natural merge sort is similar to a bottom-up merge sort except that any naturally occurring runs
(sorted sequences) in the input are exploited. Both monotonic and bitonic (alternating up/down)
runs may be exploited, with lists (or equivalently tapes or files) being convenient data structures
(used as FIFO queues or LIFO stacks).[4] In the bottom-up merge sort, the starting point assumes
each run is one item long. In practice, random input data will have many short runs that just happen
to be sorted. In the typical case, the natural merge sort may not need as many passes because there
are fewer runs to merge. In the best case, the input is already sorted (i.e., is one run), so the natural
merge sort need only make one pass through the data. In many practical cases, long natural runs are
present, and for that reason natural merge sort is exploited as the key component of Timsort.
Example:
Start : 3 4 2 1 7 5 8 9 0 6
Select runs : (3 4)(2)(1 7)(5 8 9)(0 6)
Merge : (2 3 4)(1 5 7 8 9)(0 6)
Merge : (1 2 3 4 5 7 8 9)(0 6)
Merge : (0 1 2 3 4 5 6 7 8 9)
Tournament replacement selection sorts are used to gather the initial runs for external sorting
algorithms.
In sorting n objects, merge sort has an average and
worst-case performance of O(n log n). If the running
time of merge sort for a list of length n is T(n), then
the recurrence T(n) = 2T(n/2) + n follows from the
definition of the algorithm (apply the algorithm to
two lists of half the size of the original list, and add
the n steps taken to merge the resulting two lists).
The closed form follows from the master theorem for
divide-and-conquer recurrences.
In the worst case, the number of comparisons merge
sort makes is given by the sorting numbers. These
numbers are equal to or slightly smaller than (n ⌈lg n⌉
− 2
⌈lg n⌉ + 1), which is between (n lg n − n + 1) and
(n lg n + n + O(lg n)).[5]
For large n and a randomly ordered input list, merge
sort's expected (average) number of comparisons
approaches α·n fewer than the worst case where
In the worst case, merge sort does about 39% fewer comparisons than quicksort does in the average
case. In terms of moves, merge sort's worst case complexity is O(n log n)—the same complexity as
quicksort's best case, and merge sort's best case takes about half as many iterations as the worst case.
Merge sort is more efficient than quicksort for some types of lists if the data to be sorted can only be
efficiently accessed sequentially, and is thus popular in languages such as Lisp, where sequentially
accessed data structures are very common. Unlike some (efficient) implementations of quicksort,
merge sort is a stable sort.
Analysis
Merge sort's most common implementation does not sort in place;[6]
therefore, the memory size of
the input must be allocated for the sorted output to be stored in (see below for versions that need only
n/2 extra spaces).
Variants of merge sort are primarily concerned with reducing the space complexity and the cost of
copying.
A simple alternative for reducing the space overhead to n/2 is to maintain left and right as a
combined structure, copy only the left part of m into temporary space, and to direct the merge
routine to place the merged output into m. With this version it is better to allocate the temporary
space outside the merge routine, so that only one allocation is needed. The excessive copying
mentioned previously is also mitigated, since the last pair of lines before the return result statement
(function merge in the pseudo code above) become superfluous.
One drawback of merge sort, when implemented on arrays, is its O(n) working memory requirement.
Several in-place variants have been suggested:
Katajainen et al. present an algorithm that requires a constant amount of working memory:
enough storage space to hold one element of the input array, and additional space to hold O(1)
pointers into the input array. They achieve an O(n log n) time bound with small constants, but
their algorithm is not stable.[7]
Several attempts have been made at producing an in-place merge algorithm that can be
combined with a standard (top-down or bottom-up) merge sort to produce an in-place merge
sort. In this case, the notion of "in-place" can be relaxed to mean "taking logarithmic stack
space", because standard merge sort requires that amount of space for its own stack usage. It
was shown by Geffert et al. that in-place, stable merging is possible in O(n log n) time using a
constant amount of scratch space, but their algorithm is complicated and has high constant
factors: merging arrays of length n and m can take 5n + 12m + o(m) moves.[8]
 This high
constant factor and complicated in-place algorithm was made simpler and easier to understand.
Bing-Chao Huang and Michael A. Langston[9]
 presented a straightforward linear time algorithm
practical in-place merge to merge a sorted list using fixed amount of additional space. They both
have used the work of Kronrod and others. It merges in linear time and constant extra space.
The algorithm takes little more average time than standard merge sort algorithms, free to exploit
O(n) temporary extra memory cells, by less than a factor of two. Though the algorithm is much
faster in a practical way but it is unstable also for some lists. But using similar concepts, they
have been able to solve this problem. Other in-place algorithms include SymMerge, which takes
O((n + m) log (n + m)) time in total and is stable.[10]
 Plugging such an algorithm into merge
sort increases its complexity to the non-linearithmic, but still quasilinear, O(n (log n)
2
).
A modern stable linear and in-place merging is block merge sort.
An alternative to reduce the copying into multiple lists is to associate a new field of information with
each key (the elements in m are called keys). This field will be used to link the keys and any associated
information together in a sorted list (a key and its related information is called a record). Then the
merging of the sorted lists proceeds by changing the link values; no records need to be moved at all. A
field which contains only a link will generally be smaller than an entire record so less space will also
be used. This is a standard sorting technique, not restricted to merge sort.
An external merge sort is practical to run using disk or tape drives when the data to be sorted is too
large to fit into memory. External sorting explains how merge sort is implemented with disk drives. A
typical tape drive sort uses four tape drives. All I/O is sequential (except for rewinds at the end of
Variants
Use with tape drives
Merge sort type algorithms allowed
large data sets to be sorted on early
computers that had small random
access memories by modern
standards. Records were stored on
magnetic tape and processed on
banks of magnetic tape drives, such
as these IBM 729s.
Tiled merge sort applied to an array
of random integers. The horizontal
axis is the array index and the
vertical axis is the integer.
each pass). A minimal implementation can get by with just two
record buffers and a few program variables.
Naming the four tape drives as A, B, C, D, with the original data
on A, and using only 2 record buffers, the algorithm is similar to
Bottom-up implementation, using pairs of tape drives instead of
arrays in memory. The basic algorithm can be described as
follows:
1. Merge pairs of records from A; writing two-record sublists
alternately to C and D.
2. Merge two-record sublists from C and D into four-record
sublists; writing these alternately to A and B.
3. Merge four-record sublists from A and B into eight-record
sublists; writing these alternately to C and D
4. Repeat until you have one list containing all the data, sorted
—in log2
(n) passes.
Instead of starting with very short runs, usually a hybrid
algorithm is used, where the initial pass will read many records into memory, do an internal sort to
create a long run, and then distribute those long runs onto the output set. The step avoids many early
passes. For example, an internal sort of 1024 records will save nine passes. The internal sort is often
large because it has such a benefit. In fact, there are techniques that can make the initial runs longer
than the available internal memory.[11]
With some overhead, the above algorithm can be modified to use three tapes. O(n log n) running time
can also be achieved using two queues, or a stack and a queue, or three stacks. In the other direction,
using k > two tapes (and O(k) items in memory), we can reduce the number of tape operations in
O(log k) times by using a k/2-way merge.
A more sophisticated merge sort that optimizes tape (and disk) drive usage is the polyphase merge
sort.
On modern computers, locality of reference can be of paramount
importance in software optimization, because multilevel
memory hierarchies are used. Cache-aware versions of the
merge sort algorithm, whose operations have been specifically
chosen to minimize the movement of pages in and out of a
machine's memory cache, have been proposed. For example, the
tiled merge sort algorithm stops partitioning subarrays when
subarrays of size S are reached, where S is the number of data
items fitting into a CPU's cache. Each of these subarrays is
sorted with an in-place sorting algorithm such as insertion sort,
to discourage memory swaps, and normal merge sort is then
completed in the standard recursive fashion. This algorithm has
demonstrated better performance on machines that benefit from
cache optimization. (LaMarca & Ladner 1997)
Kronrod (1969) suggested an alternative version of merge sort
that uses constant additional space. This algorithm was later refined. (Katajainen, Pasanen & Teuhola
1996)
Optimizing merge sort
Also, many applications of external sorting use a form of merge sorting where the input get split up to
a higher number of sublists, ideally to a number for which merging them still makes the currently
processed set of pages fit into main memory.
Merge sort parallelizes well due to the use of the divide-and-conquer method. Several different
parallel variants of the algorithm have been developed over the years. Some parallel merge sort
algorithms are strongly related to the sequential top-down merge algorithm while others have a
different general structure and use the K-way merge method.
The sequential merge sort procedure can be described in two phases, the divide phase and the merge
phase. The first consists of many recursive calls that repeatedly perform the same division process
until the subsequences are trivially sorted (containing one or no element). An intuitive approach is
the parallelization of those recursive calls.[12] Following pseudocode describes the merge sort with
parallel recursion using the fork and join keywords:
// Sort elements lo through hi (exclusive) of array A.
algorithm mergesort(A, lo, hi) is
if lo+1 < hi then // Two or more elements.
mid := ⌊(lo + hi) / 2⌋
fork mergesort(A, lo, mid)
mergesort(A, mid, hi)
join
merge(A, lo, mid, hi)
This algorithm is the trivial modification of the sequential version and does not parallelize well.
Therefore, its speedup is not very impressive. It has a span of , which is only an improvement of
compared to the sequential version (see Introduction to Algorithms). This is mainly due to
the sequential merge method, as it is the bottleneck of the parallel executions.
Better parallelism can be achieved by using a parallel merge algorithm. Cormen et al. present a binary
variant that merges two sorted sub-sequences into one sorted output sequence.[12]
In one of the sequences (the longer one if unequal length), the element of the middle index is selected.
Its position in the other sequence is determined in such a way that this sequence would remain sorted
if this element were inserted at this position. Thus, one knows how many other elements from both
sequences are smaller and the position of the selected element in the output sequence can be
calculated. For the partial sequences of the smaller and larger elements created in this way, the merge
algorithm is again executed in parallel until the base case of the recursion is reached.
The following pseudocode shows the modified parallel merge sort method using the parallel merge
algorithm (adopted from Cormen et al.).
/**
* A: Input array
* B: Output array
* lo: lower bound
* hi: upper bound
* off: offset
*/
algorithm parallelMergesort(A, lo, hi, B, off) is
Parallel merge sort
Merge sort with parallel recursion
Merge sort with parallel merging
The parallel multiway mergesort
process on four processors to .
len := hi - lo + 1
if len == 1 then
B[off] := A[lo]
else let T[1..len] be a new array
mid := ⌊(lo + hi) / 2⌋
mid' := mid - lo + 1
fork parallelMergesort(A, lo, mid, T, 1)
parallelMergesort(A, mid + 1, hi, T, mid' + 1)
join
parallelMerge(T, 1, mid', mid' + 1, len, B, off)
In order to analyze a Recurrence relation for the worst case span, the recursive calls of
parallelMergesort have to be incorporated only once due to their parallel execution, obtaining
.
For detailed information about the complexity of the parallel merge procedure, see Merge algorithm.
The solution of this recurrence is given by
.
This parallel merge algorithm reaches a parallelism of , which is much higher than the
parallelism of the previous algorithm. Such a sort can perform well in practice when combined with a
fast stable sequential sort, such as insertion sort, and a fast sequential merge as a base case for
merging small arrays.[13]
It seems arbitrary to restrict the merge sort algorithms to a binary merge method, since there are
usually p > 2 processors available. A better approach may be to use a K-way merge method, a
generalization of binary merge, in which sorted sequences are merged together. This merge variant
is well suited to describe a sorting algorithm on a PRAM[14][15]
.
Given an unsorted sequence of elements, the goal is to sort the
sequence with available processors. These elements are
distributed equally among all processors and sorted locally using
a sequential Sorting algorithm. Hence, the sequence consists of
sorted sequences of length . For simplification
let be a multiple of , so that for .
These sequences will be used to perform a multisequence
selection/splitter selection. For , the algorithm
determines splitter elements with global rank . Then
the corresponding positions of in each sequence
are determined with binary search and thus the are further
partitioned into subsequences with
.
Parallel multiway merge sort
Basic Idea
Furthermore, the elements of are assigned to processor , means all elements between
rank and rank , which are distributed over all . Thus, each processor receives a
sequence of sorted sequences. The fact that the rank of the splitter elements was chosen globally,
provides two important properties: On the one hand, was chosen so that each processor can still
operate on elements after assignment. The algorithm is perfectly load-balanced. On the other
hand, all elements on processor are less than or equal to all elements on processor . Hence,
each processor performs the p-way merge locally and thus obtains a sorted sequence from its subsequences. Because of the second property, no further p-way-merge has to be performed, the results
only have to be put together in the order of the processor number.
In its simplest form, given sorted sequences distributed evenly on processors and a
rank , the task is to find an element with a global rank in the union of the sequences. Hence, this
can be used to divide each in two parts at a splitter index , where the lower part contains only
elements which are smaller than , while the elements bigger than are located in the upper part.
The presented sequential algorithm returns the indices of the splits in each sequence, e.g. the indices
 in sequences such that has a global rank less than and .
[16]
algorithm msSelect(S : Array of sorted Sequences [S_1,..,S_p], k : int) is
for i = 1 to p do
(l_i, r_i) = (0, |S_i|-1)
while there exists i: l_i < r_i do
//pick Pivot Element in S_j[l_j],..,S_j[r_j], chose random j uniformly
v := pickPivot(S, l, r)
for i = 1 to p do
m_i = binarySearch(v, S_i[l_i, r_i]) //sequentially
if m_1 + ... + m_p >= k then //m_1+ ... + m_p is the global rank of v
r := m //vector assignment
else
l := m
return l
For the complexity analysis the PRAM model is chosen. If the data is evenly distributed over all , the
p-fold execution of the binarySearch method has a running time of . The expected
recursion depth is as in the ordinary Quickselect. Thus the overall
expected running time is .
Applied on the parallel multiway merge sort, this algorithm has to be invoked in parallel such that all
splitter elements of rank for are found simultaneously. These splitter elements can
then be used to partition each sequence in parts, with the same total running time of
.
Below, the complete pseudocode of the parallel multiway merge sort algorithm is given. We assume
that there is a barrier synchronization before and after the multisequence selection such that every
processor can determine the splitting elements and the sequence partition properly.
/**
* d: Unsorted Array of Elements
* n: Number of Elements
* p: Number of Processors
Multisequence selection
Pseudocode
* return Sorted Array
*/
algorithm parallelMultiwayMergesort(d : Array, n : int, p : int) is
o := new Array[0, n] // the output array
for i = 1 to p do in parallel // each processor in parallel
S_i := d[(i-1) * n/p, i * n/p] // Sequence of length n/p
sort(S_i) // sort locally
synch
v_i := msSelect([S_1,...,S_p], i * n/p) // element with global rank i * n/p
synch
(S_i,1 ,..., S_i,p) := sequence_partitioning(si, v_1, ..., v_p) // split s_i into subsequences
o[(i-1) * n/p, i * n/p] := kWayMerge(s_1,i, ..., s_p,i) // merge and assign to output array
return o
Firstly, each processor sorts the assigned elements locally using a sorting algorithm with
complexity . After that, the splitter elements have to be calculated in time
. Finally, each group of splits have to be merged in parallel by each processor
with a running time of using a sequential p-way merge algorithm. Thus, the overall
running time is given by
.
The multiway merge sort algorithm is very scalable through its high parallelization capability, which
allows the use of many processors. This makes the algorithm a viable candidate for sorting large
amounts of data, such as those processed in computer clusters. Also, since in such systems memory is
usually not a limiting resource, the disadvantage of space complexity of merge sort is negligible.
However, other factors become important in such systems, which are not taken into account when
modelling on a PRAM. Here, the following aspects need to be considered: Memory hierarchy, when
the data does not fit into the processors cache, or the communication overhead of exchanging data
between processors, which could become a bottleneck when the data can no longer be accessed via
the shared memory.
Sanders et al. have presented in their paper a bulk synchronous parallel algorithm for multilevel
multiway mergesort, which divides processors into groups of size . All processors sort locally
first. Unlike single level multiway mergesort, these sequences are then partitioned into parts and
assigned to the appropriate processor groups. These steps are repeated recursively in those groups.
This reduces communication and especially avoids problems with many small messages. The
hierarchial structure of the underlying real network can be used to define the processor groups (e.g.
racks, clusters,...).[15]
Merge sort was one of the first sorting algorithms where optimal speed up was achieved, with Richard
Cole using a clever subsampling algorithm to ensure O(1) merge.[17] Other sophisticated parallel
sorting algorithms can achieve the same or better time bounds with a lower constant. For example, in
1991 David Powers described a parallelized quicksort (and a related radix sort) that can operate in
O(log n) time on a CRCW parallel random-access machine (PRAM) with n processors by performing
partitioning implicitly.[18] Powers further shows that a pipelined version of Batcher's Bitonic
Analysis
Practical adaption and application
Further Variants
Mergesort at O((log n)
2
) time on a butterfly sorting network is in practice actually faster than his
O(log n) sorts on a PRAM, and he provides detailed discussion of the hidden overheads in
comparison, radix and parallel sorting.[19]
Although heapsort has the same time bounds as merge sort, it requires only Θ(1) auxiliary space
instead of merge sort's Θ(n). On typical modern architectures, efficient quicksort implementations
generally outperform mergesort for sorting RAM-based arrays. On the other hand, merge sort is a
stable sort and is more efficient at handling slow-to-access sequential media. Merge sort is often the
best choice for sorting a linked list: in this situation it is relatively easy to implement a merge sort in
such a way that it requires only Θ(1) extra space, and the slow random-access performance of a linked
list makes some other algorithms (such as quicksort) perform poorly, and others (such as heapsort)
completely impossible.
As of Perl 5.8, merge sort is its default sorting algorithm (it was quicksort in previous versions of
Perl). In Java, the Arrays.sort() (https://docs.oracle.com/javase/9/docs/api/java/util/Arrays.html#s
ort-java.lang.Object:A-) methods use merge sort or a tuned quicksort depending on the datatypes and
for implementation efficiency switch to insertion sort when fewer than seven array elements are being
sorted.[20] The Linux kernel uses merge sort for its linked lists.[21] Python uses Timsort, another
tuned hybrid of merge sort and insertion sort, that has become the standard sort algorithm in Java SE
7 (for arrays of non-primitive types),[22]
 on the Android platform,
[23] and in GNU Octave.
[24]
1. Skiena (2008, p. 122)
2. Knuth (1998, p. 158)
3. Katajainen, Jyrki; Träff, Jesper Larsson (March 1997). "A meticulous analysis of mergesort
programs" (http://hjemmesider.diku.dk/~jyrki/Paper/CIAC97.pdf) (PDF). Proceedings of the 3rd
Italian Conference on Algorithms and Complexity. Italian Conference on Algorithms and
Complexity. Rome. pp. 217–228. CiteSeerX 10.1.1.86.3154 (https://citeseerx.ist.psu.edu/viewdo
c/summary?doi=10.1.1.86.3154). doi:10.1007/3-540-62592-5_74 (https://doi.org/10.1007%2F3-5
40-62592-5_74).
4. Powers, David M. W. and McMahon Graham B. (1983), "A compendium of interesting prolog
programs", DCS Technical Report 8313, Department of Computer Science, University of New
South Wales.
5. The worst case number given here does not agree with that given in Knuth's Art of Computer
Programming, Vol 3. The discrepancy is due to Knuth analyzing a variant implementation of
merge sort that is slightly sub-optimal
6. Cormen; Leiserson; Rivest; Stein. Introduction to Algorithms. p. 151. ISBN 978-0-262-03384-8.
7. Katajainen, Jyrki; Pasanen, Tomi; Teuhola, Jukka (1996). "Practical in-place mergesort". Nordic
J. Computing. 3 (1): 27–40. CiteSeerX 10.1.1.22.8523 (https://citeseerx.ist.psu.edu/viewdoc/sum
mary?doi=10.1.1.22.8523).
8. Geffert, Viliam; Katajainen, Jyrki; Pasanen, Tomi (2000). "Asymptotically efficient in-place
merging". Theoretical Computer Science. 237 (1–2): 159–181. doi:10.1016/S0304-
3975(98)00162-5 (https://doi.org/10.1016%2FS0304-3975%2898%2900162-5).
9. Huang, Bing-Chao; Langston, Michael A. (March 1988). "Practical In-Place Merging".
Communications of the ACM. 31 (3): 348–352. doi:10.1145/42392.42403 (https://doi.org/10.114
5%2F42392.42403).
Comparison with other sort algorithms
Notes
Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2009) [1990].
Introduction to Algorithms (3rd ed.). MIT Press and McGraw-Hill. ISBN 0-262-03384-4.
Katajainen, Jyrki; Pasanen, Tomi; Teuhola, Jukka (1996). "Practical in-place mergesort" (https://
web.archive.org/web/20110807033704/http://www.diku.dk/hjemmesider/ansatte/jyrki/Paper/merg
esort_NJC.ps). Nordic Journal of Computing. 3. pp. 27–40. ISSN 1236-6064 (https://www.worldc
at.org/issn/1236-6064). Archived from the original (http://www.diku.dk/hjemmesider/ansatte/jyrki/
Paper/mergesort_NJC.ps) on 2011-08-07. Retrieved 2009-04-04.. Also Practical In-Place
10. Kim, Pok-Son; Kutzner, Arne (2004). Stable Minimum Storage Merging by Symmetric
Comparisons. European Symp. Algorithms. Lecture Notes in Computer Science. 3221. pp. 714–
723. CiteSeerX 10.1.1.102.4612 (https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.102.
4612). doi:10.1007/978-3-540-30140-0_63 (https://doi.org/10.1007%2F978-3-540-30140-0_63).
ISBN 978-3-540-23025-0.
11. Selection sort. Knuth's snowplow. Natural merge.
12. Cormen et al. 2009, pp. 797–805
13. Victor J. Duvanenko "Parallel Merge Sort" Dr. Dobb's Journal & blog[1] (https://duvanenko.tech.b
log/2018/01/13/parallel-merge-sort/) and GitHub repo C++ implementation [2] (https://github.co
m/DragonSpit/ParallelAlgorithms)
14. Peter Sanders, Johannes Singler. 2008. Lecture Parallel algorithms Last visited 05.02.2020.
http://algo2.iti.kit.edu/sanders/courses/paralg08/singler.pdf
15. "Practical Massively Parallel Sorting | Proceedings of the 27th ACM symposium on Parallelism in
Algorithms and Architectures". doi:10.1145/2755573.2755595 (https://doi.org/10.1145%2F27555
73.2755595).
16. Peter Sanders. 2019. Lecture Parallel algorithms Last visited 05.02.2020.
http://algo2.iti.kit.edu/sanders/courses/paralg19/vorlesung.pdf
17. Cole, Richard (August 1988). "Parallel merge sort". SIAM J. Comput. 17 (4): 770–785.
CiteSeerX 10.1.1.464.7118 (https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.464.711
8). doi:10.1137/0217049 (https://doi.org/10.1137%2F0217049).
18. Powers, David M. W. Parallelized Quicksort and Radixsort with Optimal Speedup (http://citeseer.i
st.psu.edu/327487.html), Proceedings of International Conference on Parallel Computing
Technologies. Novosibirsk. 1991.
19. David M. W. Powers, Parallel Unification: Practical Complexity (http://david.wardpowers.info/Res
earch/AI/papers/199501-ACAW-PUPC.pdf), Australasian Computer Architecture Workshop,
Flinders University, January 1995
20. OpenJDK src/java.base/share/classes/java/util/Arrays.java @ 53904:9c3fe09f69bc (https://hg.op
enjdk.java.net/jdk/jdk/file/9c3fe09f69bc/src/java.base/share/classes/java/util/Arrays.java#l1331)
21. linux kernel /lib/list_sort.c (https://github.com/torvalds/linux/blob/master/lib/list_sort.c)
22. jjb. "Commit 6804124: Replace "modified mergesort" in java.util.Arrays.sort with timsort" (http://h
g.openjdk.java.net/jdk7/jdk7/jdk/rev/bfd7abda8f79). Java Development Kit 7 Hg repo. Archived (h
ttps://web.archive.org/web/20180126184957/http://hg.openjdk.java.net/jdk7/jdk7/jdk/rev/bfd7abd
a8f79) from the original on 2018-01-26. Retrieved 24 Feb 2011.
23. "Class: java.util.TimSort<T>" (https://web.archive.org/web/20150120063131/https://android.googl
esource.com/platform/libcore/%2B/jb-mr2-release/luni/src/main/java/java/util/TimSort.java).
Android JDK Documentation. Archived from the original (https://android.googlesource.com/platfo
rm/libcore/+/jb-mr2-release/luni/src/main/java/java/util/TimSort.java) on January 20, 2015.
Retrieved 19 Jan 2015.
24. "liboctave/util/oct-sort.cc" (http://hg.savannah.gnu.org/hgweb/octave/file/0486a29d780f/liboctave/
util/oct-sort.cc). Mercurial repository of Octave source code. Lines 23-25 of the initial comment
block. Retrieved 18 Feb 2013. "Code stolen in large part from Python's, listobject.c, which itself
had no license header. However, thanks to Tim Peters for the parts of the code I ripped-off."
References
Mergesort (http://citeseer.ist.psu.edu/katajainen96practical.html). Also [3] (http://citeseerx.ist.psu.
edu/viewdoc/summary?doi=10.1.1.22.8523)
Knuth, Donald (1998). "Section 5.2.4: Sorting by Merging". Sorting and Searching. The Art of
Computer Programming. 3 (2nd ed.). Addison-Wesley. pp. 158–168. ISBN 0-201-89685-0.
Kronrod, M. A. (1969). "Optimal ordering algorithm without operational field". Soviet Mathematics
- Doklady. 10. p. 744.
LaMarca, A.; Ladner, R. E. (1997). "The influence of caches on the performance of sorting".
Proc. 8th Ann. ACM-SIAM Symp. On Discrete Algorithms (SODA97): 370–379.
CiteSeerX 10.1.1.31.1153 (https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.31.1153).
Skiena, Steven S. (2008). "4.5: Mergesort: Sorting by Divide-and-Conquer". The Algorithm
Design Manual (2nd ed.). Springer. pp. 120–125. ISBN 978-1-84800-069-8.
Sun Microsystems. "Arrays API (Java SE 6)" (http://java.sun.com/javase/6/docs/api/java/util/Arra
ys.html). Retrieved 2007-11-19.
Oracle Corp. "Arrays (Java SE 10 & JDK 10)" (https://docs.oracle.com/javase/10/docs/api/java/ut
il/Arrays.html). Retrieved 2018-07-23.
Animated Sorting Algorithms: Merge Sort (https://web.archive.org/web/20150306071601/http://w
ww.sorting-algorithms.com/merge-sort) at the Wayback Machine (archived 6 March 2015) –
graphical demonstration
Open Data Structures - Section 11.1.1 - Merge Sort (http://opendatastructures.org/versions/editio
n-0.1e/ods-java/11_1_Comparison_Based_Sorti.html#SECTION001411000000000000000), Pat
Morin
Retrieved from "https://en.wikipedia.org/w/index.php?title=Merge_sort&oldid=968920370"
This page was last edited on 22 July 2020, at 09:28 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this
site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia
Foundation, Inc., a non-profit organization.
External links